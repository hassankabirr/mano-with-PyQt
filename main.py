# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QLabel, QVBoxLayout, QWidget
from PyQt5 import QtCore, QtGui, QtWidgets
from sim import *

class Ui_MainWindow(QMainWindow):
    database_com = {'AND': "0", 'ADD': '1', 'lda':'2', 'STA': '3', 'BUN': '4', 'BSA': '5', 'ISZ': '6', 'ANDI': '8',
                    'ADDI': '9', 'LDAI': "A", 'STAI': "B", 'BUNI': "C", 'BSAI': "D", 'ISZI': "E", 'CLA': "7800",
                    'CLE': "7400", 'CMA': "7200", "CME": "7100", 'CIR': "7080", 'CIL': "7040", 'INC': "7020",
                    'SPA': "7010", 'SNA': "7008", 'SZA': '7004', 'SZE': "7002", 'HLT': "7001", 'INP': 'F800',
                    'OUT': 'F400', 'SKI': 'F200', 'SKO': 'F100', 'ION': 'F080', 'IOF': "F040"}
    # self.B1.clicked.connect(self.test)
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(705, 482)
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(0, 30, 221, 411))
        self.textEdit.setObjectName("textEdit")
        self.B1 = QtWidgets.QPushButton(self.centralwidget)
        self.B1.setGeometry(QtCore.QRect(240, 30, 431, 81))
        self.B1.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.B1.setObjectName("B1")
        self.B1.clicked.connect(self.test)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 10, 161, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(240, 340, 271, 161))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(280, 110, 401, 201))
        self.label_3.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(280, 130, 81, 41))
        self.label_4.setObjectName("label_4")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 705, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionsave = QtWidgets.QAction(MainWindow)
        self.actionsave.setObjectName("actionsave")
        self.actionclear = QtWidgets.QAction(MainWindow)
        self.actionclear.setObjectName("actionclear")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.B1.setText(_translate("MainWindow", "Assemble"))
        self.label.setText(_translate("MainWindow", "Write your code here:"))
        self.label_2.setText(_translate("MainWindow", "create by :             Hassan Kabirian  and  Alireza Habiby"))
        self.label_3.setText(_translate("MainWindow", "This program is designed to assemble your assembly code and \n"
                                                      " simulate it on a basic computer. \n"
                                                      "To use this program, just enter the assembly code in the box on the left\n"
                                                      " And click the assembly button"))
        self.label_4.setText(_translate("MainWindow", "\n"
                                                      "Description:"))
        self.actionsave.setText(_translate("MainWindow", "save"))
        self.actionclear.setText(_translate("MainWindow", "clear"))
    def read_from_textEdit(self):
        com_str = self.textEdit.toPlainText()
        com_list = com_str.split('\n')
        return com_list
    # def secend_felochart(self):

    def first_flocahart(self, com_list):
        lc = 0
        v = {}
        for i in com_list:
            i = str(i)
            if i == '':
                continue
            if ',' in i:
                spliter = i.split(',')
                spliter[0].replace(' ', '')
                lc_sring = str(hex(lc))
                lc_sring=lc_sring[2:]
                v[spliter[0]] = lc_sring
            else:
                spliter = i.split(' ')

                if spliter[0] == "ORG":
                    lc = int(spliter[1],16)

                    continue
                elif i == "END":
                    pass #go to felochart2
                    break
            lc += 1
        return v
    def secend_felochart(self,lables,comands_lines):
        commands = []
        lc  = 0
        if len(comands_lines)==0:
            return
        for i in comands_lines:
            com = ''
            i = str(i)
            com = i
            lable = ''
            if ',' in i:

                spliter = i.split(',')
                com = spliter[1]
                spliter[0].replace(' ', '')
                lable = spliter[0]

            spliter = com.split(' ')
            spliter = list(filter(None, spliter))
            if(spliter[0]=='ORG'):
                lc = int(spliter[1],16)
                continue
            elif spliter[0]=='HEX':
                dic = {}

                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = spliter[1]
                commands.append(dic)
            elif spliter[0] == 'DEC':
                dicc = {}
                dicc['lable'] = lable
                dicc['com'] = com
                dicc['address'] = hex(lc)[2:]
                dicc['hex'] = hex(int(spliter[1]) & (2**16-1))[2:]
                commands.append(dicc)
            elif com == 'END':
                print('end')
                pass
            #LDA
            elif ('I' in spliter) and ('LDA' in spliter):
                first_part = self.database_com['LDA']
                secend_part = lables[spliter[1]]
                Hex  = first_part+secend_part
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif ('I' not in spliter) and ('LDA' in spliter):

                first_part = self.database_com['lda']
                secend_part = lables[spliter[1]]
                Hex = first_part + secend_part
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            #AND
            elif ('I' in spliter) and ('AND' in spliter):
                first_part = self.database_com['ANDI']
                secend_part = lables[spliter[1]]
                Hex = first_part + secend_part
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif ('I' not in spliter) and ('AND' in spliter):
                first_part = self.database_com['AND']
                secend_part = lables[spliter[1]]
                Hex = first_part + secend_part
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            #ADD
            elif ('I'in spliter) and ('ADD' in spliter):
                first_part = self.database_com['ADDI']
                secend_part = lables[spliter[1]]
                Hex = first_part + secend_part
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif ('I' not in spliter) and ('ADD' in spliter):
                first_part =self.database_com['ADD']
                secend_part = lables[spliter[1]]
                Hex = first_part + secend_part
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            #STA
            elif ('I'in spliter) and ('STA' in spliter):
                first_part = self.database_com['STAI']
                secend_part = lables[spliter[1]]
                Hex = first_part + secend_part
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif ('I'not in spliter) and ('STA' in spliter):
                first_part = self.database_com['STA']
                secend_part = lables[spliter[1]]
                Hex = first_part + secend_part
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            #BUN
            elif ('I' in spliter) and ('BUN' in spliter):
                first_part = self.database_com['BUNI']
                secend_part = lables[spliter[1]]
                Hex = first_part + secend_part
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif ('I' not in spliter) and ('BUN' in spliter):
                first_part = self.database_com['BUN']
                secend_part = lables[spliter[1]]
                Hex = first_part + secend_part
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            #BSA
            elif ('I' in spliter) and ('BSA' in spliter):
                first_part = self.database_com['BSAI']
                secend_part = lables[spliter[1]]
                Hex = first_part + secend_part
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif ('I' not in spliter) and ('BUN' in spliter):
                first_part = self.database_com['BUN']
                secend_part = lables[spliter[1]]
                Hex = first_part + secend_part
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            #ISZ
            elif ('I' in spliter) and ('ISZ' in spliter):
                first_part = self.database_com['ISZI']
                secend_part = lables[spliter[1]]
                Hex = first_part + secend_part
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif ('I' not in spliter) and ('ISZ' in spliter):
                first_part = self.database_com['ISZ']
                secend_part = lables[spliter[1]]
                Hex = first_part + secend_part
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif 'CLA' in spliter:
                Hex = self.database_com['CLA']
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif 'CLE' in spliter:
                Hex = self.database_com['CLE']
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif 'CMA' in spliter:
                Hex = self.database_com['CMA']
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif 'CME' in spliter:
                Hex = self.database_com['CME']
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif 'CIR' in spliter:
                Hex = self.database_com['CIR']
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif 'CIL' in spliter:
                Hex = self.database_com['CIL']
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif 'INC' in spliter:
                Hex = self.database_com['INC']
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif 'SPA' in spliter:
                Hex = self.database_com['SPA']
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif 'SNA' in spliter:
                Hex = self.database_com['SNA']
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif 'SZA' in spliter:
                Hex = self.database_com['SZA']
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif 'SZE' in spliter:
                Hex = self.database_com['SZE']
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif 'HLT' in spliter:
                Hex = self.database_com['HLT']
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif 'INP' in spliter:
                Hex = self.database_com['INP']
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif 'OUT' in spliter:
                Hex = self.database_com['OUT']
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif 'SKI' in spliter:
                Hex = self.database_com['SKI']
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif 'SKO' in spliter:
                Hex = self.database_com['SKO']
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif 'ION' in spliter:
                Hex = self.database_com['ION']
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            elif 'IOF' in spliter:
                Hex = self.database_com['IOF']
                dic = {}
                dic['lable'] = lable
                dic['com'] = com
                dic['address'] = hex(lc)[2:]
                dic['hex'] = Hex
                commands.append(dic)
            lc = lc + 1
        return commands



    def test(self):
        com_list = self.read_from_textEdit()
        print(com_list)
        lable_address = self.first_flocahart(com_list)
        print(lable_address)
        commands = self.secend_felochart(lable_address, com_list)
        print(lable_address)
        self.window = QtWidgets.QDialog()
        self.ui = Ui_Dialog()
        self.ui.setupUi(self.window)
        M = ['']*4096
        for i in commands:
            index = int(i['address'], 16)
            value = i['hex']
            M[index] = value
        print(M)
        self.window.show()
        self.ui.set_Ram(commands, M)






if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
